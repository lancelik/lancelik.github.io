<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo的个性化]]></title>
    <url>%2F2018%2F06%2F18%2Fhexo%E7%9A%84%E4%B8%AA%E6%80%A7%E5%8C%96%2F</url>
    <content type="text"><![CDATA[在网上看到有些next主题的网站很炫酷，那么是怎么配置的呢？接下来我来讲一讲如何实现一些炫酷的效果 1. 在右上角或者左上角实现fork me on github具体实现方法点击这里或者这里挑选自己喜欢的样式，并复制代码然后粘贴刚才复制的代码到themes/next/layout/_layout.swig文件中(放在&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;的下面)，并把href改为你的github地址 实现效果图 2. 添加动态背景在工程文件\themes\next\source\css\_custom\custom.styl找到这个文件，然后添加如下代码1234567//滚动背景body &#123; background:url(https://source.unsplash.com/random/1600x900); background-repeat: no-repeat; background-attachment:fixed; background-position:50% 50%;&#125; url里面的是一个图片库地址，不喜欢可以换别的地址 效果图 实现点击出现桃心效果 具体实现方法copy这个网址下面的代码http://7u2ss1.com1.z0.glb.clouddn.com/love.js新建love.js文件并且将代码复制进去，然后保存。将love.js文件放到路径/themes/next/source/js/src里面，然后打开\themes\next\layout\_layout.swig文件,在末尾添加以下代码：12&lt;!-- 页面点击小红心 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt; 修改文章内链接文本样式实现效果图 具体实现方法修改文件 themes\next\source\css\_common\components\post\post.styl，在末尾添加如下css样式，：1234567891011// 文章内链接文本样式.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125; 其中选择.post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。 在每篇文章末尾统一添加“本文结束”标记实现效果图 具体实现方法在路径 \themes\next\layout\_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 接着打开\themes\next\layout\_macro\post.swig文件，在post-body 之后， post-footer 之前添加如下代码（post-footer之前两个DIV）：12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;passage-end-tag.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 然后打开主题配置文件（_config.yml),在末尾添加：123# 文章末尾添加“本文结束”标记 passage_end_tag: enabled: true 侧边栏社交小图标设置主页文章添加阴影效果在网站底部加上访问量实现统计功能添加顶部加载条在文章底部增加版权信息文章加密访问博文置顶修改打赏字体不闪动自定义鼠标样式DaoVoice 在线联系 明天再写]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot 之 HelloWorld详解]]></title>
    <url>%2F2018%2F05%2F25%2FSpring-Boot-%E4%B9%8B-HelloWorld%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[摘要: 原创出处:www.bysocket.com 泥瓦匠BYSocket HelloWorld实战详解首先得有个maven基础项目，可以直接使用Maven骨架工程生成Maven骨架Web项目，即man archetype:generate命令： mvn archetype:generate -DgroupId=springboot -DartifactId=springboot-helloworld -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false pom.xml配置代码如下：version12345678910111213141516171819202122232425262728293031&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;springboot&lt;/groupId&gt; &lt;artifactId&gt;springboot-helloworld&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;springboot-helloworld :: HelloWorld Demo&lt;/name&gt; &lt;!-- Spring Boot 启动父依赖 --&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.3.3.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;dependencies&gt; &lt;!-- Spring Boot web依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- Junit --&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 只要加入一个 Spring Boot 启动父依赖即可。 Controller层HelloWorldController的代码如下： 123456789101112 * Spring Boot HelloWorld案例 * * Created by bysocket on 16/4/26. */@RestControllerpublic class HelloWorldController &#123; @RequestMapping(&quot;/&quot;) public String sayHello() &#123; return &quot;Hello,World!&quot;; &#125;&#125; @RestController和@RequestMapping注解是来自SpringMVC的注解，它们不是SpringBoot的特定部分。 @RestController：提供实现了REST API，可以服务JSON,XML或者其他。这里是以String的形式渲染出结果。 @RequestMapping：提供路由信息，”/“路径的HTTP Request都会被映射到sayHello方法进行处理。 具体参考，世界上最好的文档来源自官方的《Spring Framework Document》 启动应用类和第一段描述一样，开箱即用。如下面Application类：1234567891011 * Spring Boot应用启动类 * * Created by bysocket on 16/4/26. */@SpringBootApplicationpublic class Application &#123; public static void main(String[] args) &#123; SpringApplication.run(Application.class,args); &#125;&#125; @SpringBootApplication：Spring Boot 应用的标识 Application很简单，一个main函数作为主入口。SpringApplication引导应用，并将Application本身作为参数传递给run方法。具体run方法会启动嵌入式的Tomcat并初始化Spring环境及其各Spring组件。 Controller层测试类一个好的程序，不能缺少好的UT。针对HelloWorldController的UT如下：1234567891011 * Spring Boot HelloWorldController 测试 - &#123;@link HelloWorldController&#125; * * Created by bysocket on 16/4/26. */public class HelloWorldControllerTest &#123; @Test public void testSayHello() &#123; assertEquals(&quot;Hello,World!&quot;,new HelloWorldController().sayHello()); &#125;&#125; 运行Just Run的宗旨，运行很简单，直接右键Run运行Application类。同样你也可以Debug Run。可以在控制台中看到：started on port(s): 8080 (http)1Started Application in 5.986 seconds (JVM running for 7.398) 然后访问 http://localhost:8080/ ,即可在页面中看到Spring Boot对你 say hello： Hello,World！ 小结 Spring Boot pom配置 Spring Boot 启动及原理 对应代码分享在 Github 主页]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot系列(一)：Spring Boot 入门篇]]></title>
    <url>%2F2018%2F05%2F25%2FSpring-Boot%E7%B3%BB%E5%88%97-%E4%B8%80-%EF%BC%9ASpring-Boot-%E5%85%A5%E9%97%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[什么是spring bootSpring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。用我的话来理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架。 使用spring boot有什么好处其实就是简单、快速、方便！平时如果我们需要搭建一个spring web项目的时候需要怎么做呢？ 1）配置web.xml，加载spring和spring mvc 2）配置数据库连接、配置spring事务 3）配置加载配置文件的读取，开启注解 4）配置日志文件 … 配置完成之后部署tomcat 调试 … 现在非常流行微服务，如果我这个项目仅仅只是需要发送一个邮件，如果我的项目仅仅是生产一个积分；我都需要这样折腾一遍！ 但是如果使用spring boot呢？ 很简单，我仅仅只需要非常少的几个配置就可以迅速方便的搭建起来一套web项目或者是构建一个微服务！ 相比之下spring boot更加方便简洁 快速入门说了那么多，手痒痒的很，马上来试试！1、访问http://start.spring.io/ 2、选择构建工具Maven Project、Spring Boot版本1.3.6以及一些工程基本信息，点击“Switch to the full version.”java版本选择1.7 3、点击Generate Project下载项目压缩包 4、解压后，使用eclipse，Import -&gt; Existing Maven Projects -&gt; Next -&gt;选择解压后的文件夹-&gt; Finsh，OK done! ·项目结构介绍 如上图所示，Spring Boot的基础结构共三个文件: l src/main/java 程序开发以及主程序入口l src/main/resources 配置文件l src/test/java 测试程序另外，spingboot建议的目录结果如下： root package结构：com.example.myproject 1234567891011121314+- example +- myproject +- Application.java | +- domain | +- Customer.java | +- CustomerRepository.java | +- service | +- CustomerService.java | +- controller | +- CustomerController.java | 1、Application.java 建议放到跟目录下面,主要用于做一些框架配置 2、domain 目录主要用于实体（Entity）与数据访问层（Repository） 3、service 层主要是业务类代码 4、controller 负责页面访问控制 采用默认配置可以省去很多配置，当然也可以根据自己的喜欢来进行更改 最后，启动Application main方法，至此一个java项目搭建好了！ 引入web模块 1、pom.xml中添加支持web的模块：123 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt; pom.xml文件中默认有两个模块： spring-boot-starter：核心模块，包括自动配置支持、日志和YAML； spring-boot-starter-test：测试模块，包括JUnit、Hamcrest、Mockito。 2、编写controller内容 123456public class HelloWorldController &#123; @RequestMapping(&quot;/hello&quot;) public String index() &#123; return &quot;Hello World&quot;; &#125;&#125; @RestController的意思就是controller里面的方法都以json格式输出，不用再写什么jackjson配置的了！ 3、启动主程序，打开浏览器访问http://localhost:8080/hello，就可以看到效果了，有木有很简单！ 如何做单元测试 打开的src/test/下的测试入口，编写简单的http请求来测试；使用mockmvc进行，利用MockMvcResultHandlers.print()打印出执行结果。 12345678910111213141516@SpringApplicationConfiguration(classes = MockServletContext.class)@WebAppConfigurationpublic class HelloWorldControlerTests &#123; private MockMvc mvc; @Before public void setUp() throws Exception &#123; mvc = MockMvcBuilders.standaloneSetup(new HelloWorldController()).build(); &#125; @Test public void getHello() throws Exception &#123; mvc.perform(MockMvcRequestBuilders.get(&quot;/hello&quot;).accept(MediaType.APPLICATION_JSON)) .andExpect(MockMvcResultMatchers.status().isOk()) .andDo(MockMvcResultHandlers.print()) .andReturn(); &#125;&#125; 开发环境的调试热启动在正常开发项目中已经很常见了吧，虽然平时开发web项目过程中，改动项目启重启总是报错；但springBoot对调试支持很好，修改之后可以实时生效，需要添加以下的配置： 1234567891011121314151617 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt;&lt;/dependencies&gt;&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;fork&gt;true&lt;/fork&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 该模块在完整的打包环境下运行的时候会被禁用。如果你使用java -jar启动应用或者用一个特定的classloader启动，它会认为这是一个“生产环境”。 总结使用spring boot可以非常方便、快速搭建项目，使我们不用关心框架之间的兼容性，适用版本等各种问题，我们想使用任何东西，仅仅添加一个配置就可以，所以使用sping boot非常适合构建微服务。]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo+github搭建（一）]]></title>
    <url>%2F2018%2F05%2F09%2Fhexo-github%E6%90%AD%E5%BB%BA(%E4%B8%80)%2F</url>
    <content type="text"><![CDATA[近段时间使用hexo+github搭建这个博客走了很多弯路，现把搭建可能会遇到的各种问题做一个详细的解答，话不多说直接上手（nodejs和git自己去下载安装） 安装hexo： `npm install hexo-cli -g` 随便找个盘下右击git： 1234hexo i blog //这里blog指的是项目名称 i等同于init cd blog //进入bolg这个文件下 hexo g //generetor的缩写 hexo s //server的缩写 然后打开http://localhost:4000就可以查看默认主题啦 当然，这里可以更改其他主题，可以去github上选择，这里我用的是next主题 git clone https://github.com/iissnan/hexo-theme-next themes/next 完成后打开站点配置文件，找到theme字段，把后面的值改为next就好了 改好了以后再终端输入 123hexo clean //清除缓存hexo g //重新生成hexo s //部署到本地 这样就可以查看新的主题啦]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo+github搭建（二）]]></title>
    <url>%2F2018%2F05%2F09%2Fhexo-github%E6%90%AD%E5%BB%BA(%E4%BA%8C)%2F</url>
    <content type="text"><![CDATA[关于github配置很多人在giuhub这里出了很多错，其实也只是按照基本流程和几个注意项就好了注册这里就不说了 按照图片的流程来 这里注意，库名称一定要可用户名对应后面再跟github.io 走到这一步已经就可以点进链接查看你的站点了，当然现在站点什么都没有 然后就是keys配置了，首先生成密匙 ssh-keygen -t rsa -C &quot;gdutxiaoxu@163.com&quot; 然后去C:\Users\asus下找到.ssh这个文件夹复制id_rsa.pub这个文件里面的东西，然后 这样github上的算是配置好了，接下来就是使用git部署到github了 修改hexo站点配置文件，改成这样就好 注意！冒号后面一定要有一个空格！ 最后部署一下就好了12345npm install hexo-deployer-git --save //装一个插件hexo d //部署//等一会儿后就可以访问你的网页啦]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[致歉]]></title>
    <url>%2F2018%2F05%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[因服务器问题，原博客会在一个月以内关闭，现开设新博客，欢迎大家收藏关注！]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
</search>
